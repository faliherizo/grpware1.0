#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('node-rest:server');
var http = require('http');
var ExpressPeerServer = require('peer').ExpressPeerServer;
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

app.use('/', ExpressPeerServer(server, options));
// Chargement de socket.io
var io = require('socket.io').listen(server);
// Quand un client se connecte, on le note dans la console
io.sockets.on('connection', function (socket) {
    console.log('Il me parle ! Il me dit ok');
    socket.on('new_profil', function(pseudo) {
        socket.pseudo = pseudo;
    });
    socket.emit('message', 'Vous êtes bien connecté !');
    //Receive all msg form all client
    socket.broadcast.emit('message', 'Un autre client vient de se connecter !');
    // Quand le serveur reçoit un signal de type "message" du client
    socket.on('message', function (message) {
        console.log(socket.pseudo + ' me parle ! Il me dit : ' + message);
    });
    console.log('Il me parle ! Il me dit ok');
});

 console.log('Il me parle ! Il me dit ko');
/**
 * Listen on provided port, on all network interfaces.
 */
var options = {
    debug: true
}

//var peerServer = ExpressPeerServer(server, options);
//app.use('/api', peerServer);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


//peerServer.on('connection', function(id) { console.log(id); });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
